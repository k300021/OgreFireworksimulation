#ifndef __APP_STATE_H__
#define __APP_STATE_H__

#include "OgreFramework.h"

//-----------------------------------------------

class AppState;

//-----------------------------------------------

class AppStateListener
{
public:

    OgreFramework mOgre;

public:

	AppStateListener( void ){};
	virtual ~AppStateListener( void ){};

	virtual void        manageAppState( Ogre::String stateName, AppState* state ) = 0;

	virtual AppState*	findByName( Ogre::String stateName ) = 0;
	virtual void		changeAppState( AppState *state ) = 0;
	virtual bool		pushAppState( AppState* state ) = 0;
	virtual void		popAppState( void ) = 0;
	virtual void		pauseAppState( void ) = 0;
	virtual void		shutdown( void ) = 0;
    virtual void        popAllAndPushAppState( AppState* state ) = 0;
};

//-----------------------------------------------

class AppState : public OIS::KeyListener, public OIS::MouseListener, public OgreBites::SdkTrayListener
{
public:    
	static void     create( AppStateListener* parent, const Ogre::String name ){};

	void            destroy( void ){ delete this; }

	virtual void    enter( void ) = 0;
	virtual void    exit( void ) = 0;
	virtual bool    pause( void ){ return true; }
	virtual void    resume( void ){};
	virtual void    update( double timeSinceLastFrame ) = 0;

protected:

	AppState( void ){};

	AppState*	findByName( Ogre::String stateName ){ return mParent->findByName( stateName ); }
	void		changeAppState( AppState* state ){ mParent->changeAppState( state ); }
	bool		pushAppState( AppState* state ){ return mParent->pushAppState( state ); }
	void		popAppState( void ){ mParent->popAppState(); }
	void		shutdown( void ){ mParent->shutdown(); }
    void        popAllAndPushAppState( AppState* state ){ mParent->popAllAndPushAppState( state ); }

protected:

	AppStateListener*       mParent;
    OgreFramework*          mOgre;

	Ogre::Camera*			mCamera;
	Ogre::SceneManager*     mSceneMgr;
    Ogre::FrameEvent        mFrameEvent;
};

//-----------------------------------------------

#define DECLARE_APPSTATE_CLASS( T )										\
static void create( AppStateListener* parent, const Ogre::String name )	\
{																		\
	T* myAppState = new T();											\
	myAppState->mParent = parent;                                       \
    myAppState->mOgre = &( parent->mOgre );                             \
	parent->manageAppState( name, myAppState );							\
}

//-----------------------------------------------

#endif
